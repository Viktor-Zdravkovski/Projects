// <auto-generated />
using System;
using BurgerShop.DataBase;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BurgerShop.DataBase.Migrations
{
    [DbContext(typeof(BurgerShopDbContext))]
    partial class BurgerShopDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.32")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BurgerShop.Domain.Burger", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("HasFries")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVegan")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVegetarian")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("Burgers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            HasFries = true,
                            IsVegan = false,
                            IsVegetarian = false,
                            Name = "Classic Beef Burger",
                            OrderId = 1,
                            Price = 10
                        },
                        new
                        {
                            Id = 2,
                            HasFries = false,
                            IsVegan = true,
                            IsVegetarian = true,
                            Name = "Vegan Delight",
                            OrderId = 2,
                            Price = 12
                        },
                        new
                        {
                            Id = 3,
                            HasFries = true,
                            IsVegan = false,
                            IsVegetarian = false,
                            Name = "Chicken Burger",
                            OrderId = 3,
                            Price = 11
                        },
                        new
                        {
                            Id = 4,
                            HasFries = false,
                            IsVegan = false,
                            IsVegetarian = true,
                            Name = "Cheese Veggie Burger",
                            OrderId = 4,
                            Price = 9
                        },
                        new
                        {
                            Id = 5,
                            HasFries = true,
                            IsVegan = true,
                            IsVegetarian = true,
                            Name = "Spicy Black Bean Burger",
                            OrderId = 5,
                            Price = 8
                        });
                });

            modelBuilder.Entity("BurgerShop.Domain.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ClosesAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OpensAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "123 Main St, Springfield",
                            ClosesAt = new DateTime(2024, 8, 11, 21, 0, 0, 0, DateTimeKind.Local),
                            Name = "Downtown Diner",
                            OpensAt = new DateTime(2024, 8, 11, 9, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 2,
                            Address = "456 Ocean Blvd, Beach City",
                            ClosesAt = new DateTime(2024, 8, 11, 23, 0, 0, 0, DateTimeKind.Local),
                            Name = "Seaside Cafe",
                            OpensAt = new DateTime(2024, 8, 11, 9, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 3,
                            Address = "789 Peak Rd, Alpine Town",
                            ClosesAt = new DateTime(2024, 8, 11, 23, 0, 0, 0, DateTimeKind.Local),
                            Name = "Mountain View Restaurant",
                            OpensAt = new DateTime(2024, 8, 11, 8, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 4,
                            Address = "101 Skyline Dr, Metropolis",
                            ClosesAt = new DateTime(2024, 8, 11, 0, 0, 0, 0, DateTimeKind.Local),
                            Name = "City Lights Bistro",
                            OpensAt = new DateTime(2024, 8, 11, 9, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 5,
                            Address = "202 Riverbank Ave, Water Town",
                            ClosesAt = new DateTime(2024, 8, 11, 23, 0, 0, 0, DateTimeKind.Local),
                            Name = "Riverside Grill",
                            OpensAt = new DateTime(2024, 8, 11, 7, 0, 0, 0, DateTimeKind.Local)
                        });
                });

            modelBuilder.Entity("BurgerShop.Domain.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelivered")
                        .HasColumnType("bit");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "123 Main St, Springfield",
                            FullName = "John Doe",
                            IsDelivered = true,
                            LocationId = 1
                        },
                        new
                        {
                            Id = 2,
                            Address = "456 Oak Ave, Metropolis",
                            FullName = "Jane Smith",
                            IsDelivered = false,
                            LocationId = 2
                        },
                        new
                        {
                            Id = 3,
                            Address = "789 Pine Rd, Gotham",
                            FullName = "Alice Johnson",
                            IsDelivered = true,
                            LocationId = 3
                        },
                        new
                        {
                            Id = 4,
                            Address = "101 Maple Dr, Star City",
                            FullName = "Bob Brown",
                            IsDelivered = false,
                            LocationId = 4
                        },
                        new
                        {
                            Id = 5,
                            Address = "202 Elm St, Smallville",
                            FullName = "Charlie Green",
                            IsDelivered = true,
                            LocationId = 5
                        });
                });

            modelBuilder.Entity("BurgerShop.Domain.Burger", b =>
                {
                    b.HasOne("BurgerShop.Domain.Order", null)
                        .WithMany("Burgers")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BurgerShop.Domain.Order", b =>
                {
                    b.HasOne("BurgerShop.Domain.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("BurgerShop.Domain.Order", b =>
                {
                    b.Navigation("Burgers");
                });
#pragma warning restore 612, 618
        }
    }
}
